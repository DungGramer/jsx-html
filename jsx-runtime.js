const flatten=e=>e.reduce((e,t)=>e.concat(Array.isArray(t)?flatten(t):t),[]);async function transformElement(e){if(e){if(e instanceof Promise)return e;switch(typeof e){case"string":case"number":return document.createTextNode(e.toString());case"function":return e();default:return e}}}const appendChildren=(t,e)=>{const r=Array.isArray(e)?flatten(e):[e];return r.forEach(async e=>{e&&(e=await transformElement(e),t.appendChild(e))}),t},jsx=(e,{ref:r,children:n,...a}={})=>{if("string"==typeof e){let t=document.createElement(e);return Object.keys(a).forEach(e=>{a[e]&&("function"==typeof a[e]?t[e]=a[e]:t.setAttribute(e,a[e]))}),n&&(t=appendChildren(t,n)),r&&("function"==typeof r?r(t):t.setAttribute("ref",r)),t}if("function"==typeof e)return e({ref:r,children:n,...a});throw new Error("Invalid tag type: "+e)},jsxs=jsx,Fragment=({children:e}={})=>{var t=document.createDocumentFragment();return appendChildren(t,e)},render=async(e,t)=>{e&&(e=await transformElement(e),(t||document.body).appendChild(e))};export{jsx,jsxs,Fragment,render};